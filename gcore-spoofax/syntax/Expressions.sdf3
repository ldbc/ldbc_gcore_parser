module Expressions

imports

  Names
  Literals
  MatchPattern
  gcore-spoofax
  Extensions

context-free syntax

  ExpAsVar.ExpAsVar = <<Exp><VarAssign?>>

  Exp = <(<Exp>)> {bracket}
  Exp = PropRef
  Exp = VarRef
  Exp = BasicMatchPattern
  Exp = Literal
  
  Exp.List = <[<{Exp ", "}*>]>

  Exp.UMin = <-<Exp>>
  Exp.IsNull    = <<Exp> IS NULL> {case-insensitive}
  Exp.IsNotNull = <<Exp> IS NOT NULL> {case-insensitive}

  Exp.Pow = <<Exp>^<Exp>> {right}
  
  Exp.Mul = <<Exp> * <Exp>> {left}
  Exp.Div = <<Exp> / <Exp>> {left}
  Exp.Mod = <<Exp> % <Exp>> {left}

  Exp.Add = <<Exp> + <Exp>> {left}
  Exp.Sub = <<Exp> - <Exp>> {left}

  Exp.Eq   = <<Exp> = <Exp>> {non-assoc}
  Exp.Gt   = [[Exp] > [Exp]] {non-assoc}
  Exp.Lt   = [[Exp] < [Exp]] {non-assoc}
  Exp.Gte  = [[Exp] >= [Exp]] {non-assoc}
  Exp.Lte  = [[Exp] <= [Exp]] {non-assoc}
  Exp.Neq1 = [[Exp] != [Exp]] {non-assoc}
  Exp.Neq2 = [[Exp] <> [Exp]] {non-assoc}
  Exp.In   = <<Exp> IN <Exp>> {non-assoc, case-insensitive} 

  Exp.Not = <NOT <Exp>> {case-insensitive}

  Exp.And = <<Exp> AND <Exp>> {left, case-insensitive}
  Exp.Or  = <<Exp> OR <Exp>> {left, case-insensitive}

  Exp.SimpleCase = <CASE <Exp> <WhenThenCase+> <ElseCase?> END> {case-insensitive}
  Exp.SearchedCase = <CASE <WhenThenCase+> <ElseCase?> END> {case-insensitive}
  WhenThenCase.WhenThenCase = <WHEN <Exp> THEN <Exp>> {case-insensitive}
  ElseCase.ElseCase = <ELSE <Exp>> {case-insensitive}

  Exp.Cast = <CAST(<Exp> AS <DATA-TYPE>)> {case-insensitive}

  GraphOrSubQuery          = GraphName
  GraphOrSubQuery.SubQuery = <( <GraphQuery> )>

  Exp.Exists = <EXISTS ( <Query> )> {case-insensitive}

context-free syntax // function calls

  Exp.FunctionCall = <<PackageName?><FUNCTION-NAME>(<{Exp ", "}*>)> {case-insensitive, avoid}
  PackageName.PackageName = <<IDENTIFIER>.>

context-free syntax // Aggregates

  Exp.collect      = <COLLECT(<Distinct?><Exp>)> {case-insensitive}
  Exp.count        = <COUNT(<Distinct?><StarOrExp>)> {case-insensitive}
  Exp.min          = <MIN(<Distinct?><Exp>)> {case-insensitive}
  Exp.max          = <MAX(<Distinct?><Exp>)> {case-insensitive}
  Exp.sum          = <SUM(<Distinct?><Exp>)> {case-insensitive}
  Exp.avg          = <AVG(<Distinct?><Exp>)> {case-insensitive}
  Exp.group-concat = <GROUP_CONCAT(<Distinct?><Exp>)> {case-insensitive} // concatenation of group of strings using comma (,) as separator

  StarOrExp.Star = <*>
  StarOrExp = <<Exp>>
  Distinct.Distinct = <DISTINCT> {case-insensitive}

context-free priorities

  {
      Exp.UMin
      Exp.IsNull
      Exp.IsNotNull
  }
  >
  {
    right:
      Exp.Pow
  }
  >
  {
    left:
      Exp.Mul
      Exp.Div
      Exp.Mod
  }
  >
  {
    left:
      Exp.Add
      Exp.Sub
  }
  >
  {
    left:
      Exp.Eq
      Exp.Neq1
      Exp.Neq2
      Exp.Gt
      Exp.Lt
      Exp.Gte
      Exp.Lte
      Exp.In
  }
  >
  {
    right:
      Exp.Not
  }
  >
  {
    left:
      Exp.And
  }
  >
  {
    left:
      Exp.Or
  }
